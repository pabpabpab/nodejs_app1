/*
На первом тике в фазе pool синхронные операции где 1 и 5 (вывод в консоль этих цифр),
потом резолвится промис (последняя строчка кода), его колбэк из then попадает в фазу check в список микрозадач,
потом еще раз резолвится промис, но мы попрежнему остаемся в фазе check в списке микрозадач,
таким образом следущая - 6.
Первый тик закончен.

На следующем тике в фазе timers нас ждет колбэк из первого таймера и он выполняется,
таким образом следущая - 2. Далее резолвится промис, его колбэк отправляется в список микрозадач,
в фазе check он выполняется, отправляем колбэк второго таймера в очередь колбэков таймеров.
Второй тик закончен.

На третьем тике в фазе timers выполняется колбэк второго таймера и выводится цифра 3,
далее колбэк промиса отправляется в список микрозадач, и в фазе check он там выполняется,
выводится цифра 4.
Третий тик закончен.

Итого - 156234.
*/

console.log('Record 1');

setTimeout(() => {
    console.log('Record 2');

    Promise.resolve().then(() => {
        setTimeout(() => {
            console.log('Record 3');
            Promise.resolve().then(() => {
                console.log('Record 4');
            });
        });
    });
});

console.log('Record 5');

Promise.resolve().then(() => Promise.resolve().then(() => console.log('Record 6')));